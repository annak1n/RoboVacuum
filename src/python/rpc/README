This is a first cut at an RPC server to let python code invoke class methods on other CPU cores.

On initialization, user code must create a server instance on each core. At start up the server 
opens a TCP connection to each of its peers.  Client code uses these connections to convey RPC 
requests between the CPU cores.

The server is a python thread which is spawned by the constructor of the server class.

The user must add explicit imports in the file rpcserver.py to define the classes that can be 
accessed on remote cores. The example given is a class called MyClass with a method foo(), this
 is defined in the file test.py and is explicitly imported in the file rpcserver.py by line 
"from test import MyClass"

An RPC is represented as a nested dict that contains: a header identifying the source and
destination CPU core and the type of the message, and a nested  message body containing 
the RPC request which identifies the module name, the function name, and any parameters that 
should be passed to the function.

For transit through the TCP connnection the dict is converted to a JSON string, and this is in 
turn wrapped in a netstring encoding. The netsting coding simply prepends a header that specifies 
the length of the JSON payload and makes it easier for the server to extract discreet messages 
when receiving. The netstring coding is useful since multiple clients may be queueing RPC 
requests to the same server.

The server extracts the module name and function name from the decoded dict, and uses this to 
obtain a reference to the actual function in order to invoked it. The dict is also passed to 
the method in order that it can extract the passed parameters. 

n.b. it is a constraint that all remote methods must accept their parameters via the dict. 
The approach has the advantage of making the method parameters transparent to the server, since 
the server needs only the module and function name, and only the method itself needs to know 
about the specific parameters it accepts.


So what are all these files ?

1. core0.py, core1,py, core2.py, core3.py
These files are placeholders for user application code, they simply create an RPC server 
and then (with the exception of core0.py) do nothing for now.

core0.py additionally by way of example invokes the method foo() belonging to class MyClass 
and requests it to be run on core 3.

2. test.py
This contains the definition of MyClass

3. rpcserver.py
This is the RPC server

4. netstring.py
This is an implementation of netstring that I got from somewhere on the net

5. launch.sh
This is a script that lauches the four main application programs (core0 - core3.py)
it uses taskset -c <core> to ensure that each is run on a particular core.
THIS BIT IS IMPORTANT







